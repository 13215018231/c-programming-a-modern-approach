The following loop is supposed to delete all nodes from a linked list and
release the memory that they occupy. Unfortunately, the loop is incorrect.
Explain what's wrong with it and how to fix the bug.

for (p = first; p != NULL; p = p->next)
    free(p);

The problem is that we are freeing the memory allocated to p, and then attempting
to call p = p->next. Since p is a dangling pointer after deallocation its
behaviour is undefined. 

To fix this we can use an additional pointer and copy the p pointer to it. We
can then change p to point to the next node, and finally free the memory by
calling free on the temp pointer:

struct node *temp;

while (p != NULL) {
    temp = p;
    p = p->next;
    free(temp);
}
